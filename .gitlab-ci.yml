stages:
  - lint
  - test
  - deploy

variables:
  BUNDLER_VERSION: 2.5.9
  RUBY_VERSION: 3.3.1

.setup-backend: &setup-backend
  before_script:
    - apt-get update -qq && apt-get install -y curl gnupg
    - curl -sSL https://rvm.io/mpapis.asc | gpg --import -
    - curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
    - curl -sSL https://get.rvm.io | bash -s stable
    - source /etc/profile.d/rvm.sh
    - rvm install $RUBY_VERSION
    - rvm use $RUBY_VERSION --default
    - gem install bundler -v $BUNDLER_VERSION
    - gem install rubocop

lint-frontend:
  stage: lint
  before_script:
    - apt-get update -qq && apt-get install -y nodejs npm
    - cd frontend/
    - npm install
    - npm i -D eslint
  script:
    - mkdir -p frontend-lint-report
    - touch ./frontend-lint-report/lint-report.txt
    - npm run lint > ./frontend-lint-report/lint-report.txt
  artifacts:
    paths:
      - frontend/frontend-lint-report/lint-report.txt
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'


lint-backend:
  stage: lint
  extends: .setup-backend
  script:
    - cd backend/
    - bundle config set frozen false
    - bundle install
    - mkdir -p backend-lint-report
    - touch ./backend-lint-report/lint-report.txt
    - rubocop -d > ./backend-lint-report/lint-report.txt || true
  artifacts:
    paths:
      - backend/backend-lint-report/lint-report.txt
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'


unit-tests:
  stage: test
  extends: .setup-backend
  script:
    - cd backend/
    - bundle config set frozen false
    - bundle install
    - gem install minitest-reporters
    - export MINITEST_REPORTER=HtmlReporter
    - ./bin/rails test
  artifacts:
    paths:
      - ./backend/test/**/*.html
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'

deploy:
  stage: deploy
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHA backend/
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHA
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
        docker pull $DOCKER_IMAGE:$CI_COMMIT_SHA
        docker stop backend || true
        docker rm backend || true
        docker run -d --name backend -p 3000:3000 $DOCKER_IMAGE:$CI_COMMIT_SHA
      EOF
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"

